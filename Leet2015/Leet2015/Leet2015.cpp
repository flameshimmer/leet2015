// Leet2015.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include "Solution1.h"


using namespace std;
typedef std::numeric_limits< double > dbl;

int _tmain(int argc, _TCHAR* argv[])
{
	// Runtime begin marker start
	clock_t begin = clock();

	//Solution1::TwoSum();
	//Solution1::ThreeSum();
	//Solution1::ThreeSumClosest();
	//Solution1::FourSum();
	//Solution1::AddTwoNumbers();
	//Solution1::AddBinary();
	//Solution1::Anagrams();
	//Solution1::LongestSubStringWithoutRepeatingCharacters();
	//Solution1::LongestPalindromeSubString();
	//Solution1::LongestCommonPrefix();
	//Solution1::LongestValidParentheses();
	//Solution1::LongestConsecutiveSequence();
	//Solution1::SearchInRotatedSortedArray();
	//Solution1::SearchInRotatedSortedArrayII();
	//Solution1::ReverseInteger();
	//Solution1::ReverseBits();
	//Solution1::ReverseWordsInAString();
	//Solution1::ReverseWordsInAStringII();
	//Solution1::ReverseLinkedListII();
	//Solution1::ReverseNodesInKGroup();
	//Solution1::RomanToInteger();
	//Solution1::IntegerToRoman();
	//Solution1::WordBreak();
	//Solution1::WordBreakII();
	//Solution1::NumberOf1Bits();
	//Solution1::PlusOne();
	//Solution1::FactorialTrailingZeroes();
	//Solution1::PascalsTriangle();
	//Solution1::PascalsTriangleII();
	//Solution1::LinkedListCycle();
	//Solution1::LinkedListCycleII();
	//Solution1::RotateArray();
	//Solution1::RotateImage();
	//Solution1::RotateList();
    //Solution1::FirstMissingPositive();
	//Solution1::FindMinimumInRotatedSortedArray();
	//Solution1::FindMinimumInRotatedSortedArrayII();
	//Solution1::UniquePaths();
	//Solution1::UniquePathsII();
	//Solution1::DecodeWays();
	//Solution1::EditDistance();
	//Solution1::MaximumSubarray();
	//Solution1::Combinations();
	//Solution1::CombinationSum();
	//Solution1::CombinationSumII();
	//Solution1::MedianOfTwoSortedArrays();
	//Solution1::PalindromeNumber();
	//Solution1::StringToInteger();
	//Solution1::LetterCombinationsOfAPhoneNumber();
	//Solution1::RemoveNthNodeFromEndOfList();
	//Solution1::SingleNumber();
	//Solution1::SingleNumberII();
	//Solution1::ValidParentheses();
	//Solution1::ValidPalindrome();
	//Solution1::ValidSudoku();
	//Solution1::SudokuSolver();
	//Solution1::RegularExpressionMatching();
	//Solution1::WildcardMatching();
	//Solution1::MinimumPathSum();
	//Solution1::Triangle();
	//Solution1::InterleavingString();
	//Solution1::MergeTwoSortedLists();
	//Solution1::MergeKSortedLists();
	//Solution1::GenerateParentheses();
	//Solution1::SwapNodesInPairs();
	//Solution1::RemoveDuplicatesFromSortedArray();
	//Solution1::RemoveElement();
	//Solution1::DivideTwoIntegers();
	//Solution1::RemoveDuplicatesfromSortedList();
	//Solution1::RemoveDuplicatesFromSortedListII();
	//Solution1::NextPermutation();
	//Solution1::CountAndSay();
	//Solution1::LengthOfLastWord();
	//Solution1::PartitionList();
	//Solution1::SortList();
	//Solution1::ReorderList();
	//Solution1::IntersectionOfTwoLinkedLists();
	//Solution1::InsertionSortList();
	//Solution1::ZigZagConversion();
	//Solution1::ContainerWithMostWater();
	//Solution1::ImplementStrStr();
	//Solution1::Permutation();
	//Solution1::PermutationII();
	//Solution1::Pow();
	//Solution1::Subsets();
	//Solution1::SubsetsII();
	//Solution1::GrayCode();
	//Solution1::CopyListWithRandomPointer();
	//Solution1::ConvertSortedListToBinarySearchTree();
	//Solution1::SearchForARange();
	//Solution1::MergeSortedArray();
	//Solution1::MajorityElement();
	//Solution1::ExcelSheetColumnNumber();
	//Solution1::ExcelSheetColumnTitle();
	//Solution1::CompareVersionNumbers();
	//Solution1::SearchInsertionPosition();
	//Solution1::ClimbingStairs();
	//Solution1::MaximalRectangle();
	//Solution1::LargestRectangleInHistogram();
	//Solution1::TrappingRainWater();
	//Solution1::BitwiseAndOfNumbersRange();
	//Solution1::MultiplyStrings();
	//Solution1::JumpGame();
	//Solution1::JumpGameII();
	//Solution1::NQueens();
	//Solution1::NQueensII();
	//Solution1::HouseRobber();
	//Solution1::SpiralMatrix();
	//Solution1::SpiralMatrixII();
	//Solution1::Sqrt();
	//Solution1::MergeIntervals();
	//Solution1::InsertInterval();
	//Solution1::PermutationSequence();
	//Solution1::SetMatrixZeroes();
	//Solution1::RemoveLinkedListElements();
	//Solution1::PathSum();
	//Solution1::MaximumDepthOfBinaryTree();
	//Solution1::MinimumDepthOfBinaryTree();
	//Solution1::SymmetricTree();
	//Solution1::ValidNumber();
	//Solution1::TextJustification();
	//Solution1::SimplifyPath();
	//Solution1::SearchA2DMatrix();
	//Solution1::SortColors();
	//Solution1::WordSearch();
	//Solution1::RemoveDuplicatesFromSortedArrayII();
	//Solution1::RestoreIPAddresses();
	//Solution1::BalancedBinaryTree();
	//Solution1::BinaryTreeLevelOrderTraversal();
	//Solution1::BinaryTreeLevelOrderTraversalII();
	//Solution1::PathSumII();
	//Solution1::BinarySearchTreeIterator();
	//Solution1::SumRootToLeafNumbers();
	//Solution1::BinaryTreePreorderTraversal();
	//Solution1::FlattenBinaryTreeToLinkedList();
	//Solution1::BinaryTreeZigzagLevelOrderTraversal();	
	//Solution1::BinaryTreeUpsideDown();
	//Solution1::ConstructBinaryTreeFromPreorderAndInorderTraversal();
	//Solution1::ConstructBinaryTreeFromInorderAndPostorderTraversal();
	//Solution1::BinaryTreeRightSideView();
	//Solution1::UniqueBinarySearchTrees();
	//Solution1::UniqueBinarySearchTreesII();	
	//Solution1::ConvertSortedArrayToBinarySearchTree();
	//Solution1::PopulatingNextRightPointersInEachNode();
	//Solution1::PopulatingNextRightPointersInEachNodeII();
	//Solution1::BinaryTreeInorderTraversal();
	//Solution1::ValidateBinarySearchTree();
	//Solution1::BinaryTreePostorderTraversal();	
	//Solution1::RecoverBinarySearchTree();
	//Solution1::BinaryTreeMaximumPathSum();
	//Solution1::HappyNumber();
	//Solution1::IsomorphicStrings();
	//Solution1::ReadNCharactersGivenRead4();
	//Solution1::LargestNumber();
	//Solution1::ReverseLinkedList();
	//Solution1::GasStation();
	//Solution1::MinimumWindowSubstring();
	//Solution1::SubstringWithConcatenationOfAllWords();
	//Solution1::NumberOfIslands();
	//Solution1::MinimumSizeSubarraySum();
	//Solution1::CloneGraph();
	//Solution1::MinStack();
	//Solution1::CountPrimes();
	//Solution1::PalindromePartitioning();
	//Solution1::PalindromePartitioningII();
	//Solution1::TwoSumII();
	//Solution1::TwoSumIII();
	//Solution1::SurroundedRegions();
	//Solution1::WordLadder();
	//Solution1::WordLadderII();
	//Solution1::FindPeakElement();
	//Solution1::EvaluateReversePolishNotation();
	//Solution1::BestTimeToBuyAndSellStock();
	//Solution1::BestTimeToBuyAndSellStockII();
	//Solution1::BestTimeToBuyAndSellStockIII();
	//Solution1::BestTimeToBuyAndSellStockIV();
	//Solution1::ContainsDuplicate();
	//Solution1::ContainsDuplicateII();
	//Solution1::InvertBinaryTree();
	//Solution1::RectangleArea();
	//Solution1::MaximumProductSubarray();
	//Solution1::CombinationSumIII();
	//Solution1::KthLargestElementInAnArray();
	//Solution1::HouseRobberII();
	//Solution1::RepeatedDNASequences();
	//Solution1::AddAndSearchWordDataStructureDesign();
	//Solution1::ImplementTrie();
	//Solution1::CourseSchedule();
	//Solution1::CourseScheduleII();
	//Solution1::ImplementStackUsingQueues();
	//Solution1::MaximumGap();
	//Solution1::FractionToRecurringDecimal();
	//Solution1::BasicCalculator();
	//Solution1::ScrambleString();
	//Solution1::Candy();
	//Solution1::DistinctSubsequences();
	//Solution1::LRUCacheEntry();
	//Solution1::MaxPointsOnALine();
	//Solution1::ReadNCharactersGivenRead4II();
	//Solution1::OneEditDistance();
	//Solution1::MissingRanges();
	//Solution1::CountCompleteTreeNodes();
	//Solution1::BasicCalculatorII();
	Solution1::MaximalSquare();


	// Runtime end marker
	clock_t end = clock();
	double elapsed_time_in_millisecond = double(end - begin) / double(CLOCKS_PER_SEC / 1000.0);
	
	// End program routine
	cout.precision(dbl::digits10);
	cout << "\n\nYour program total runtime is: " << elapsed_time_in_millisecond << "ms";
	cout << "\n\nPress enter key to exit ...\n\n";
	cin.get();	
	return 0;
}

