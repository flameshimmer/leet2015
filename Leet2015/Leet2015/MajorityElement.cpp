#include "stdafx.h"

//Given an array of size n, find the majority element.
//The majority element is the element that appears more than ⌊ n / 2 ⌋ times.
//
//You may assume that the array is non - empty and the majority element always exist in the array.

namespace Solution1
{
	int majorityElement(vector<int> &num) 
	{
		int len = num.size();
		if (len <= 2)
		{
			return num[0];
		}

		sort(num.begin(), num.end());
		return num[len / 2];
	}

	namespace other
	{
		int majorityElement(vector<int> &num)
		{
			unordered_map<int, int>map;
			for (int i : num)
			{
				if (map.count(i) == 0)
				{
					map[i] = 1;
				}
				else
				{
					map[i]++;
				}
			}
			int maxVal = INT_MIN;
			int result;
			for (auto it = map.begin(); it != map.end(); ++it)
			{
				if (it->second > maxVal)
				{
					result = it->first;
				}
			}
			return result;
		}
	}

	namespace divideAndConquer
	{
		int checkCount(vector<int>& num, int target)
		{
			int count = 0;
			for (int i : num)
			{
				if (target == i)
				{
					count++;
				}
			}
			return count;
		}
		int majorityElementRecurse(vector<int>& num, int start, int end)
		{
			if (start == end){ return num[start]; }
			
			int mid = start + (end - start) / 2;
			int left = majorityElementRecurse(num, start, mid);
			int right = majorityElementRecurse(num, mid + 1, end);
			if (left == right) { return left; }
			else
			{
				int checkCountLeft = checkCount(num, left);
				int checkCountRight = checkCount(num, right);
				return checkCountLeft > checkCountRight ? left : right;
			}
		}
		int majorityElement(vector<int> &num)
		{
			return majorityElementRecurse(num, 0, num.size() - 1);
		}
	}


	namespace bitCounting
	{
		int majorityElement(vector<int> &num)
		{
			int result = 0;
			for (int i = 0; i < 32; i++)
			{
				int mask = 1 << i;
				int countZero = 0;
				int countOne = 0;
				for (int target : num)
				{
					if ((mask & target) == 0){ countZero++; }
					else{ countOne++; }
				}
				if (countOne > countZero)
				{
					result |= mask;
				}
			}
			return result;
		}
	}

	namespace boyerMooreMajorityVoteAlgorithm
	{
		int majorityElement(vector<int> &num)
		{
			int count = 0;
			int target;
			for (int i : num)
			{
				if (count == 0)
				{
					count = 1;
					target = i;
				}
				else
				{
					(target == i) ? count++ : count--;
				}
			}
			return target;
		}
	}

	void MajorityElement()
	{
		// Error: when use sorting note that element at position n/2 is the one we should use, instead of n/2 + 1. Remember the index start with 0 
		print(majorityElement(createVector({ 3, 3, 4 })));
		print(majorityElement(createVector({})));

		using namespace other;
		print(other::majorityElement(createVector({ 1 })));
		print(other::majorityElement(createVector({ 6,5,5 })));

		using namespace divideAndConquer;
		print(divideAndConquer::majorityElement(createVector({ 1 })));
		print(divideAndConquer::majorityElement(createVector({ 6, 5, 5 })));

		using namespace bitCounting;
		//print(bitCounting::majorityElement(createVector({ 1 })));
		print(bitCounting::majorityElement(createVector({ 6, 5, 5 })));

		using namespace boyerMooreMajorityVoteAlgorithm;
		print(boyerMooreMajorityVoteAlgorithm::majorityElement(createVector({ 1 })));
		print(boyerMooreMajorityVoteAlgorithm::majorityElement(createVector({ 6, 5, 5 })));
	}

}